//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/CarInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CarInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CarInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CarInput"",
    ""maps"": [
        {
            ""name"": ""Car"",
            ""id"": ""8ebb5754-0417-4f56-a5d7-0ee1ec78af87"",
            ""actions"": [
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""e78ec867-74b7-4815-a57f-ad8637ca553a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Accelerating"",
                    ""type"": ""Value"",
                    ""id"": ""d2a06e32-7475-40a2-977b-f22343017899"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""d3871edc-3335-42eb-8c48-ce3ec324b9f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c9105e61-cf47-42ab-bc1b-683ec4b8fc71"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""44ede7be-6c95-44e1-9ccb-d691368d57ff"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a12bf023-c86e-42e2-bb20-0693a81d0d97"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""bb4882a0-d9a1-472e-b9eb-f8f3807306c7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""436048cf-bfc5-443c-a9ad-4ebd4f4c18b5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""651b0568-1c3f-4c71-b0b1-7bf76c000806"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d39f7663-a4f7-450e-8663-091acbe78d87"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5bde7845-d5c3-4d25-a970-0353b45100bc"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2369de8a-5b60-406e-8e83-d4b9ab8e1788"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""327a330a-cfbc-49ea-900b-71f362a15ae8"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerating"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eafc7d7c-20b7-4893-a68b-e20694c13936"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerating"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a7d6e04-4b73-43cc-a5d4-7c9eb39e44c0"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerating"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68c0f757-d2ec-4069-b5f6-79667cfe601f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerating"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc025c55-4ca9-4358-9530-9d223188baa0"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""beb8a1ad-a87d-4ee2-a1bd-e42db8020540"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""454d3eaa-e2db-4ab2-8e06-a0614f3c6f1b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BeforeRace"",
            ""id"": ""9a1f0fbc-b477-451b-b53b-afb374ab03a5"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""bc0a37f7-1344-4a41-9bc5-2b0c4e272cdd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5253b6c7-2848-4fd9-88e5-11ab1f519064"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3806f617-8f68-4d2a-a096-4b3e7afb5721"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Vide"",
            ""id"": ""8c6ecb63-af95-4416-84e4-4be54336738e"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": []
}");
        // Car
        m_Car = asset.FindActionMap("Car", throwIfNotFound: true);
        m_Car_Turn = m_Car.FindAction("Turn", throwIfNotFound: true);
        m_Car_Accelerating = m_Car.FindAction("Accelerating", throwIfNotFound: true);
        m_Car_Reload = m_Car.FindAction("Reload", throwIfNotFound: true);
        // BeforeRace
        m_BeforeRace = asset.FindActionMap("BeforeRace", throwIfNotFound: true);
        m_BeforeRace_Newaction = m_BeforeRace.FindAction("New action", throwIfNotFound: true);
        // Vide
        m_Vide = asset.FindActionMap("Vide", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Car
    private readonly InputActionMap m_Car;
    private List<ICarActions> m_CarActionsCallbackInterfaces = new List<ICarActions>();
    private readonly InputAction m_Car_Turn;
    private readonly InputAction m_Car_Accelerating;
    private readonly InputAction m_Car_Reload;
    public struct CarActions
    {
        private @CarInput m_Wrapper;
        public CarActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Turn => m_Wrapper.m_Car_Turn;
        public InputAction @Accelerating => m_Wrapper.m_Car_Accelerating;
        public InputAction @Reload => m_Wrapper.m_Car_Reload;
        public InputActionMap Get() { return m_Wrapper.m_Car; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarActions set) { return set.Get(); }
        public void AddCallbacks(ICarActions instance)
        {
            if (instance == null || m_Wrapper.m_CarActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CarActionsCallbackInterfaces.Add(instance);
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
            @Accelerating.started += instance.OnAccelerating;
            @Accelerating.performed += instance.OnAccelerating;
            @Accelerating.canceled += instance.OnAccelerating;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
        }

        private void UnregisterCallbacks(ICarActions instance)
        {
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
            @Accelerating.started -= instance.OnAccelerating;
            @Accelerating.performed -= instance.OnAccelerating;
            @Accelerating.canceled -= instance.OnAccelerating;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
        }

        public void RemoveCallbacks(ICarActions instance)
        {
            if (m_Wrapper.m_CarActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICarActions instance)
        {
            foreach (var item in m_Wrapper.m_CarActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CarActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CarActions @Car => new CarActions(this);

    // BeforeRace
    private readonly InputActionMap m_BeforeRace;
    private List<IBeforeRaceActions> m_BeforeRaceActionsCallbackInterfaces = new List<IBeforeRaceActions>();
    private readonly InputAction m_BeforeRace_Newaction;
    public struct BeforeRaceActions
    {
        private @CarInput m_Wrapper;
        public BeforeRaceActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_BeforeRace_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_BeforeRace; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BeforeRaceActions set) { return set.Get(); }
        public void AddCallbacks(IBeforeRaceActions instance)
        {
            if (instance == null || m_Wrapper.m_BeforeRaceActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BeforeRaceActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IBeforeRaceActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IBeforeRaceActions instance)
        {
            if (m_Wrapper.m_BeforeRaceActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBeforeRaceActions instance)
        {
            foreach (var item in m_Wrapper.m_BeforeRaceActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BeforeRaceActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BeforeRaceActions @BeforeRace => new BeforeRaceActions(this);

    // Vide
    private readonly InputActionMap m_Vide;
    private List<IVideActions> m_VideActionsCallbackInterfaces = new List<IVideActions>();
    public struct VideActions
    {
        private @CarInput m_Wrapper;
        public VideActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_Vide; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VideActions set) { return set.Get(); }
        public void AddCallbacks(IVideActions instance)
        {
            if (instance == null || m_Wrapper.m_VideActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VideActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IVideActions instance)
        {
        }

        public void RemoveCallbacks(IVideActions instance)
        {
            if (m_Wrapper.m_VideActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVideActions instance)
        {
            foreach (var item in m_Wrapper.m_VideActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VideActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VideActions @Vide => new VideActions(this);
    public interface ICarActions
    {
        void OnTurn(InputAction.CallbackContext context);
        void OnAccelerating(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
    }
    public interface IBeforeRaceActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IVideActions
    {
    }
}
